name: Docker Build and Push

on:
  workflow_dispatch:
  push:
    paths:
      - 'src/**/Dockerfile'
      - 'src/**/package.json'
      - 'tsconfig.json'
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'src/**/Dockerfile'
      - 'src/**/package.json'
      - 'tsconfig.json'
  repository_dispatch:
    types: [sync]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: novus-lab/mcp-servers

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        run: |
          # Find all Dockerfiles and process them one by one
          find src -name Dockerfile | while read -r dockerfile; do
            # Extract service name from path and convert to lowercase
            # e.g., src/time/Dockerfile -> time
            # e.g., src/Google-Maps/Dockerfile -> google-maps
            service_name=$(dirname "$dockerfile" | sed 's|src/||' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')
            service_dir=$(dirname "$dockerfile")
            
            echo "Building and pushing image for service: $service_name"
            echo "Building from directory: $service_dir"
            
            # For services that need the entire project context
            if grep -q "COPY src/.* /app" "$dockerfile"; then
              echo "Using full project context for $service_name"
              docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service_name:latest \
                          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service_name:${{ github.sha }} \
                          -f "$dockerfile" .
            else
              # For services that only need their own directory
              echo "Using service directory context for $service_name"
              docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service_name:latest \
                          -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service_name:${{ github.sha }} \
                          -f "$dockerfile" "$service_dir"
            fi
            
            # Only push if this is not a PR
            if [ "${{ github.event_name }}" != "pull_request" ]; then
              docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service_name:latest
              docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/$service_name:${{ github.sha }}
            fi
          done 